@{
    Layout = "~/Views/Shared/_LayoutDemo.cshtml";
}
@{
    ViewBag.Title = "Collections Demo";
}

<style type="text/css">
    #demoHeader label { color: Blue; }

    #demoContent {
        height: 600px;
        overflow: visible;
        position: relative;
        vertical-align: top;
    }

    #demoContent > fieldset { border-radius: 5px; }

    #demoContent fieldset > legend {
        color: Blue;
        font-weight: bold;
    }

    #demoContent .radioItem {
        display: inline-block;
        margin: 4px;
        padding: 4px;
    }

    .stackPanelItemV {
        background-color: ButtonFace;
        color: ButtonText;
        height: auto;
        margin: 3px 0px 3px 0px;
        min-width: 120px;
        padding: 4px;
        width: auto;
    }

    .stackPanelItemH {
        background-color: ButtonFace;
        color: ButtonText;
        height: auto;
        margin: 0px 3px 0px 3px;
        padding: 4px;
        width: 140px;
    }

    .stackPanelV {
        border: 1px solid gray;
        float: left;
        max-height: 250px;
        min-height: 65px;
        overflow: auto;
        width: 150px;
    }

    .stackPanelH {
        border: 1px solid gray;
        float: left;
        height: 65px;
        margin-left: 15px;
        max-width: 650px;
        min-width: 145px;
        overflow: auto;
    }

    .ria-stack-panel-item fieldset { border-radius: 5px; }

    .ria-stack-panel-item fieldset legend {
        color: blue;
        font-weight: bold;
    }
</style>

<script type="text/javascript">
    require(["jriapp", "collectionDemo", "jriapp_ui", "jriapp_ru"],
        function (RIAPP, DEMO, UI, LANG) {
            //for example - subscribe to init event
            RIAPP.bootstrap.init(function (bootstrap) {
                console.log('bootstrap initialized');
            });

            //create and start application here
            let promise = RIAPP.bootstrap.startApp(function () {
                    return new DEMO.DemoApplication(DEMO.appOptions);
                },
                function(app) {
                    console.log('application starting');
                });

            promise.then(function () {
                $("#demoContent").animate({ opacity: 1 }, 1000);
                console.log('application started successfuly');
            }, function (err) {
                console.log('application failed to start');
            });
        });
</script>

<h2 class="ex8">@ViewBag.Title</h2>

<!--using dataform is convenient because it sets a datacontext scope for all its content-->
<div id="demoContent" style="opacity:0;" data-bind="this.dataContext,source=demoVM" data-view="dataform">
    <fieldset>
        <legend>Radios elements (click on them to fill the stackpanels)</legend>
        <label class="radioItem">
            <input type="radio" class="ria-radio" name="radioItem"
                   data-bind="this.checked,to=radioValue,mode=TwoWay,converter=radioValueConverter,param=radioValue1"/>
            <span data-bind1="this.value,to=radioValues[radioValue1].value" 
                  data-bind2="this.toolTip,to=radioValues[radioValue1].comment"></span>
        </label>
        <label class="radioItem">
            <input type="radio" class="ria-radio" name="radioItem"
                   data-bind="this.checked,to=radioValue,mode=TwoWay,converter=radioValueConverter,param=radioValue2"/>
            <span data-bind1="this.value,to=radioValues[radioValue2].value" 
                  data-bind2="this.toolTip,to=radioValues[radioValue2].comment"></span>
        </label>
        <label class="radioItem">
            <input type="radio" class="ria-radio" name="radioItem"
                   data-bind="this.checked,to=radioValue,mode=TwoWay,converter=radioValueConverter,param=radioValue3"/>
            <span data-bind1="this.value,to=radioValues[radioValue3].value" 
                  data-bind2="this.toolTip,to=radioValues[radioValue3].comment"></span>
        </label>
        <label class="radioItem">
            <input type="radio" class="ria-radio" name="radioItem"
                   data-bind="this.checked,to=radioValue,mode=TwoWay,converter=radioValueConverter,param=radioValue4"/>
            <span data-bind1="this.value,to=radioValues[radioValue4].value" 
                  data-bind2="this.toolTip,to=radioValues[radioValue4].comment"></span>
        </label>
    </fieldset>
    <h3>
        Demo of using Vertical and Horizontal StackPanels &nbsp;(count:&nbsp;<span data-bind="this.value,to=historyList.count"></span>)
    </h3>
    <!--example of using stackpanel for vertical and horizontal list view-->
    <div class="stackPanelV" 
         data-bind="this.dataSource,to=historyList" 
         data-view="stackpanel"
         data-view-options="templateID:stackPanelItemTemplateV,orientation:vertical"></div>
    <div class="stackPanelH" 
         data-bind="this.dataSource,to=historyList" 
         data-view="stackpanel"
         data-view-options="templateID:stackPanelItemTemplateH,orientation:horizontal"></div>
    <br style="clear: both"/>
    <button class="btn btn-info btn-small" 
            style="margin: 5px 5px 5px 0px;" 
            data-bind="this.command,to=clearListCommand">Clear list</button>

    <br/>
    <fieldset>
        <legend>Summary (ordered list databound to the collection)</legend>
        <ol style="max-height: 150px; overflow: auto; width: 300px;" 
            data-bind="this.dataSource,to=historyList" 
            data-view-options="templateID:ItemListTemplate"></ol>
    </fieldset>
</div>

<script id="stackPanelItemTemplateV" type="text/x-template">
    <div class="stackPanelItemV">
        <strong>
            <span style="color: Blue;" data-bind="this.value,to=radioValue"></span>
        </strong>
        <br/>
        Time:&nbsp;<span data-bind="this.value,to=time,converter=dateTimeConverter,param='HH:mm:ss'"></span>
    </div>
</script>
<script id="stackPanelItemTemplateH" type="text/x-template">
    <div class="stackPanelItemH">
        <strong>
            <span style="color: Blue;" data-bind="this.value,to=radioValue"></span>
        </strong>
        <br/>
        Time:&nbsp;<span data-bind="this.value,to=time,converter=dateTimeConverter,param='HH:mm:ss'"></span>
    </div>
</script>
<script id="ItemListTemplate" type="text/x-template">
    <div style="padding-left: 5px;">
        <span style="color: Blue; margin-right: 10px;" data-bind="this.value,to=radioValue"></span>Time:&nbsp;
        <span data-bind="this.value,to=time,converter=dateTimeConverter,param='HH:mm:ss'"></span>
    </div>
</script>